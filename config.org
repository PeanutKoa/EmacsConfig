#+TITLE: Peanutkoa's Config
#+AUTHOR: PeanutKoa
#+DESCRIPTION: My own personal config for GNU Emacs

* TABLE OF CONTENTS :TOC_3:
- [[#package-management-basic-keybinds-other-startup-stuff][Package Management, Basic Keybinds, Other Startup Stuff]]
  - [[#startup-info][Startup Info]]
    - [[#setup][Setup]]
  - [[#straightel-and-use-package][Straight.el and Use-Package]]
    - [[#setup-1][Setup]]
  - [[#meta-settings][Meta Settings]]
    - [[#save-file-changes][Save File Changes]]
    - [[#startup-fullscreen][Startup Fullscreen]]
  - [[#beautifying][Beautifying]]
    - [[#catppuccintheme][Catppuccin/Theme]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#font][Font]]
    - [[#line-numbering][Line Numbering]]
    - [[#smoother-scrollingrefresh-display][Smoother Scrolling/Refresh Display]]
    - [[#remove-elements][Remove Elements]]
  - [[#keybindings][Keybindings]]
    - [[#evil-mode][Evil Mode]]
    - [[#evil-collection][Evil Collection]]
    - [[#evil-commenter][Evil Commenter]]
    - [[#general-setup][General Setup]]
    - [[#globalnon-leader-keybinds][Global/Non-Leader Keybinds]]
- [[#ui-and-ivy][UI and Ivy]]
  - [[#ui][UI]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#which-key][Which-Key]]
    - [[#helpful][Helpful]]
  - [[#ivy][Ivy]]
    - [[#ivy-setup][Ivy Setup]]
    - [[#counsel][Counsel]]
    - [[#ivy-rich][Ivy Rich]]
    - [[#ivy-precient][Ivy-Precient]]
- [[#org-mode][Org Mode]]
  - [[#org-bullet-mode][Org Bullet Mode]]
    - [[#setup-2][Setup]]
  - [[#toc-org][TOC-ORG]]
    - [[#setup-3][Setup]]
- [[#project-management][Project Management]]
  - [[#projectile][Projectile]]
    - [[#setup-4][Setup]]
    - [[#counsel-integration][Counsel Integration]]
  - [[#magit][Magit]]
    - [[#magit-setup][Magit Setup]]
    - [[#magit-forge][Magit Forge]]
  - [[#dired-config][Dired Config]]
    - [[#nerd-icons][Nerd Icons]]
    - [[#single-buffer-mode][Single Buffer Mode]]
- [[#lsp][LSP]]
  - [[#lsp-mode][LSP-Mode]]
    - [[#lsp-mode-setup][LSP-Mode Setup]]
    - [[#lsp-uicompatibility][LSP UI/Compatibility]]
  - [[#company][Company]]
    - [[#company-mode][Company-Mode]]
- [[#keybindings-leader][Keybindings Leader]]

* Package Management, Basic Keybinds, Other Startup Stuff

** Startup Info

*** Setup
#+BEGIN_SRC emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

** Straight.el and Use-Package

*** Setup
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+END_SRC

** Meta Settings

*** Save File Changes
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil
        make-backup-files nil
        large-file-warning-threshold nil)
#+END_SRC

*** Startup Fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Beautifying

*** Catppuccin/Theme
#+BEGIN_SRC emacs-lisp
  (use-package catppuccin-theme
    :straight t)
  (straight-use-package 'doom-themes)
  (load-theme 'catppuccin :no-confirm)
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 120)
#+END_SRC

*** Line Numbering
#+BEGIN_SRC emacs-lisp
    ;;setup
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
    ;;turn off for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

*** Smoother Scrolling/Refresh Display
#+BEGIN_SRC emacs-lisp
  (setq redisplay-dont-pause t
    scroll-margin 1
    scroll-step 1
    scroll-conservatively 10000
    scroll-preserve-screen-position 1)
#+END_SRC

*** Remove Elements
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Keybindings

*** Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC

*** Evil Collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

*** Evil Commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :straight t)
  ;; please bind to "<leader>"+";"
#+END_SRC

*** General Setup
#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t
    :after evil
    :config
    (general-evil-setup)
    (general-create-definer pkoa/leader
    :states '(normal insert visual emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC"))
#+END_SRC

*** Global/Non-Leader Keybinds
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "C-x M-x" 'redraw-display
   "<escape>" 'keyboard-escape-quit)
#+END_SRC

* UI and Ivy

** UI

*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))
#+END_SRC

*** Which-Key
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
#+END_SRC

*** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** Ivy

*** Ivy Setup

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
  	 :map ivy-minibuffer-map
  	 ("TAB" . ivy-alt-done)
  	 ("C-l" . ivy-alt-done)
  	 ("C-j" . ivy-next-line)
  	 ("C-k" . ivy-previous-line)
  	 :map ivy-switch-buffer-map
  	 ("C-k" . ivy-previous-line)
  	 ("C-l" . ivy-done)
  	 ("C-d" . ivy-switch-buffer-kill)
  	 :map ivy-reverse-i-search-map
  	 ("C-k" . ivy-previous-line)
  	 ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+END_SRC


*** Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight t
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+END_SRC

*** Ivy Rich
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :straight t
    :config
    (ivy-rich-mode 1))
#+END_SRC

*** Ivy-Precient

#+BEGIN_SRC emacs-lisp
  (use-package ivy-prescient
    :straight t
    :config
    (ivy-prescient-mode 1))
#+END_SRC

* Org Mode

** Org Bullet Mode

*** Setup
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :hook (org-mode . org-indent-mode))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** TOC-ORG

*** Setup
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :straight t
    :hook (org-mode . toc-org-mode))
#+END_SRC

* Project Management

** Projectile

*** Setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+END_SRC

*** Counsel Integration
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :straight t
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Magit

*** Magit Setup
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :commands magit-status)
#+END_SRC

*** Magit Forge
#+BEGIN_SRC emacs-lisp
  (use-package forge
    :after magit
    :straight t)
#+END_SRC 

** Dired Config

*** Nerd Icons
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-dired
    :straight t
    :hook (dired-mode . nerd-icons-dired-mode))
#+END_SRC

*** Single Buffer Mode
#+BEGIN_SRC emacs-lisp
  (use-package dired-single
    :straight t)
#+END_SRC

* LSP

** LSP-Mode

*** LSP-Mode Setup
#+BEGIN_SRC emacs-lisp
  (defun pkoa/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . pkoa/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+END_SRC

*** LSP UI/Compatibility
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :straight t 
    :after lsp)

  (use-package lsp-ivy
    :straight t
    :after lsp)
#+END_SRC

** Company

*** Company-Mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
#+END_SRC

* Keybindings Leader
