#+TITLE: Peanutkoa's Config
#+AUTHOR: PeanutKoa
#+DESCRIPTION: My own personal config for GNU Emacs

* TABLE OF CONTENTS :TOC_3:
- [[#package-management-basic-keybinds-other-startup-stuff][Package Management, Basic Keybinds, Other Startup Stuff]]
  - [[#startup-info][Startup Info]]
    - [[#setup][Setup]]
  - [[#straightel-and-use-package][Straight.el and Use-Package]]
    - [[#setup-1][Setup]]
  - [[#meta-settings][Meta Settings]]
    - [[#save-file-changes][Save File Changes]]
    - [[#startup-fullscreen][Startup Fullscreen]]
    - [[#sudo-edit][Sudo Edit]]
    - [[#diminish][Diminish]]
    - [[#app-launcher][App Launcher]]
  - [[#beautifying][Beautifying]]
    - [[#catppuccintheme][Catppuccin/Theme]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#font][Font]]
    - [[#line-numbering][Line Numbering]]
    - [[#smoother-scrollingrefresh-display][Smoother Scrolling/Refresh Display]]
    - [[#remove-elements][Remove Elements]]
    - [[#dashboard][Dashboard]]
    - [[#transparency][Transparency]]
  - [[#keybindings][Keybindings]]
    - [[#evil-mode][Evil Mode]]
    - [[#evil-collection][Evil Collection]]
    - [[#evil-commenter][Evil Commenter]]
    - [[#blimpy][Blimpy]]
    - [[#general-setup][General Setup]]
    - [[#globalnon-leader-keybinds][Global/Non-Leader Keybinds]]
- [[#ui-and-ivy][UI and Ivy]]
  - [[#ui][UI]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#which-key][Which-Key]]
    - [[#helpful][Helpful]]
    - [[#jinxspellcheck][Jinx/Spellcheck]]
    - [[#treemacs][Treemacs]]
  - [[#ivy][Ivy]]
    - [[#ivy-setup][Ivy Setup]]
    - [[#counsel][Counsel]]
    - [[#ivy-rich][Ivy Rich]]
    - [[#ivy-precient][Ivy-Precient]]
- [[#org-mode][Org Mode]]
  - [[#beautifying-1][Beautifying]]
    - [[#basic-setup][Basic Setup]]
    - [[#visual-fill][Visual-Fill]]
    - [[#org-bullets][Org-Bullets]]
  - [[#functional][Functional]]
    - [[#toc-org][TOC-Org]]
- [[#project-management][Project Management]]
  - [[#projectile][Projectile]]
    - [[#setup-2][Setup]]
    - [[#counsel-integration][Counsel Integration]]
    - [[#projectile-rgag-integration][Projectile RG/AG Integration]]
  - [[#magit][Magit]]
    - [[#magit-setup][Magit Setup]]
    - [[#magit-forge][Magit Forge]]
  - [[#dired-config][Dired Config]]
    - [[#nerd-icons][Nerd Icons]]
    - [[#single-buffer-mode][Single Buffer Mode]]
    - [[#dired-open][Dired Open]]
- [[#lsp][LSP]]
  - [[#lsp-mode][LSP-Mode]]
    - [[#lsp-mode-setup][LSP-Mode Setup]]
    - [[#lsp-uicompatibility][LSP UI/Compatibility]]
  - [[#company][Company]]
    - [[#company-mode][Company-Mode]]
    - [[#company-prescient][Company-Prescient]]
  - [[#languages][Languages]]
    - [[#lua][Lua]]
    - [[#ruby][Ruby]]
    - [[#hyprlang][Hyprlang]]
- [[#terminal-and-shell][Terminal and Shell]]
  - [[#term][Term]]
    - [[#better-term][Better Term]]
    - [[#term-256-color][Term 256 Color]]
    - [[#eat-better-term][EaT (Better Term)]]
  - [[#shell][Shell]]
    - [[#better-eshell][Better eShell]]
- [[#keybindings-leader][Keybindings Leader]]
  - [[#ui-1][UI]]
    - [[#window-w][Window (w)]]
    - [[#buffer-b][Buffer (b)]]
  - [[#actions][Actions]]
    - [[#file-f][File (f)]]
    - [[#magit-m][Magit (m)]]
    - [[#org-o][Org (o)]]
    - [[#misc-non-prefixed][Misc (non-prefixed)]]
- [[#ending-script][Ending Script]]
  - [[#optimization][Optimization]]
    - [[#gc-faster][GC faster]]

* Package Management, Basic Keybinds, Other Startup Stuff

** Startup Info

*** Setup
#+BEGIN_SRC emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (recentf-mode 1)

  (defun efs/display-startup-time ()
    (message "Emacs loaded with %d garbage collections." gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

** Straight.el and Use-Package

*** Setup
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+END_SRC

** Meta Settings

*** Save File Changes
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil
        make-backup-files nil
        large-file-warning-threshold nil)
#+END_SRC

*** Startup Fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

*** Sudo Edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :straight t)
#+END_SRC

*** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :straight t)
#+END_SRC

*** App Launcher
#+BEGIN_SRC emacs-lisp
  (defun emacs-run-launcher ()
    "Creates a Run Launcher similar to KRunner, set to C-M-<SPC>"
    (interactive)
    (with-selected-frame 
      (make-frame '((name . "emacs-run-launcher")
                    (minibuffer . only)
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    (auto-raise . t) ; focus on this frame
                    ;;(tool-bar-lines . 0)
                    ;;(menu-bar-lines . 0)
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)))
                    (unwind-protect
                      (counsel-linux-app)
                      (delete-frame))))
#+END_SRC

** Beautifying

*** Catppuccin/Theme
#+BEGIN_SRC emacs-lisp
  (use-package catppuccin-theme
    :straight t)
  (straight-use-package 'doom-themes)
  (load-theme 'catppuccin :no-confirm)
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :straight t
    :hook
    (prog-mode . rainbow-mode)
    (org-mode . rainbow-mode))
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 120)
#+END_SRC

*** Line Numbering
#+BEGIN_SRC emacs-lisp
  ;;setup
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  ;;turn off for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook
  		eat-mode-hook
  		woman-mode-hook
  		eww-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

*** Smoother Scrolling/Refresh Display
#+BEGIN_SRC emacs-lisp
  (setq redisplay-dont-pause t
    scroll-margin 1
    scroll-step 1
    scroll-conservatively 10000
    scroll-preserve-screen-position 1)
#+END_SRC

*** Remove Elements
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp

  (use-package nerd-icons
    :straight t
    :custom
    (nerd-icons-font-family "Symbols Nerd Font Mono"))

  (use-package dashboard
    :straight t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-center-content t)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (setq dashboard-banner-logo-title "PeanutKoa's Emacs, Powered by Evil!")
    (setq dashboard-startup-banner "~/.emacs.d/evil.png") 
    (setq dashboard-items '((recents   . 5)
    			  (bookmarks . 5)
    			  (projects  . 5)
    			  (registers . 5)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

*** Transparency
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 95))
#+END_SRC

** Keybindings

*** Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC

*** Evil Collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

*** Evil Commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :straight t)
  ;; please bind to "<leader>"+";"
#+END_SRC

*** Blimpy
#+BEGIN_SRC emacs-lisp
    (use-package blimpy
      :straight (blimpy :host github :repo "progfolio/blimpy")
      :after (evil)
      :config
      (add-hook 'blimpy-before-typing-the-word-blimpy-in-emacs-hook
                (apply-partially #'evil-insert 1)))
#+END_SRC

*** General Setup
#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t
    :after evil
    :config
    (general-evil-setup)
    (general-create-definer pkoa/leader
    :states '(normal insert visual emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC"))
#+END_SRC

*** Global/Non-Leader Keybinds
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "C-x M-x" 'redraw-display
   "<escape>" 'keyboard-escape-quit)
#+END_SRC

* UI and Ivy

** UI

*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))
#+END_SRC

*** Which-Key
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
#+END_SRC

*** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :straight t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

*** Jinx/Spellcheck
#+BEGIN_SRC emacs-lisp
  (use-package jinx
    :straight t
    :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages)))
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :straight t
      :config
      (setq treemacs-position 'right)
      :defer t)

    (use-package treemacs-evil
      :after (treemacs evil)
      :straight t)

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :straight t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :straight t)

    (use-package treemacs-nerd-icons
      :straight t
      :after treemacs
      :config
      (treemacs-load-theme "nerd-icons"))

#+END_SRC

** Ivy

*** Ivy Setup

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
  	 :map ivy-minibuffer-map
  	 ("TAB" . ivy-alt-done)
  	 ("C-l" . ivy-alt-done)
  	 ("C-j" . ivy-next-line)
  	 ("C-k" . ivy-previous-line)
  	 :map ivy-switch-buffer-map
  	 ("C-k" . ivy-previous-line)
  	 ("C-l" . ivy-done)
  	 ("C-d" . ivy-switch-buffer-kill)
  	 :map ivy-reverse-i-search-map
  	 ("C-k" . ivy-previous-line)
  	 ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+END_SRC


*** Counsel

#+BEGIN_SRC emacs-lisp
    (use-package counsel
      :straight t
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (counsel-mode 1))

    (use-package flycheck
      :straight t
      :after lsp-mode
      :defer t
      :diminish
      :hook (lsp-mode . flycheck-mode))
#+END_SRC

*** Ivy Rich
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-ivy-rich
    :straight t
    :init
    (nerd-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :straight t
      :init
      (ivy-rich-mode 1))
#+END_SRC

*** Ivy-Precient

#+BEGIN_SRC emacs-lisp
  (use-package ivy-prescient
    :straight t
    :config
    (ivy-prescient-mode 1))
#+END_SRC

* Org Mode

** Beautifying

*** Basic Setup
#+BEGIN_SRC emacs-lisp
  (defun pkoa/hyphen-dot ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

    (use-package org
      :hook (org-mode . visual-line-mode)
      (org-mode . org-indent-mode)
      :config
      (setq org-ellipsis " ▾")
      (pkoa/hyphen-dot))
#+END_SRC

*** Visual-Fill
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :straight t
    :config
    (setq visual-fill-column-width 170
  	visual-fill-column-center-text t)
    :hook (org-mode . visual-fill-column-mode))
#+END_SRC

*** Org-Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Functional

*** TOC-Org
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :straight t
    :hook (org-mode . toc-org-mode))
#+END_SRC

* Project Management

** Projectile

*** Setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+END_SRC

*** Counsel Integration
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :straight t
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

*** Projectile RG/AG Integration
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :straight t)

  (use-package ag
    :straight t)
#+END_SRC 

** Magit

*** Magit Setup
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :commands magit-status)
#+END_SRC

*** Magit Forge
#+BEGIN_SRC emacs-lisp
  (use-package forge
    :after magit
    :straight t)
#+END_SRC 

** Dired Config

*** Nerd Icons
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-dired
    :straight t
    :hook (dired-mode . nerd-icons-dired-mode))
#+END_SRC

*** Single Buffer Mode
#+BEGIN_SRC emacs-lisp
  (use-package dired-single
    :straight t)
#+END_SRC

*** Dired Open
#+BEGIN_SRC emacs-lisp
  (use-package dired-open
    :straight t
    :config
    (setq dired-open-extensions '(("gif" .  "gwenview")
  				("jpg" .  "gwenview")
  				("png" .  "gwenview")
  				("mov" .    "haruna")
  				("mp4" .    "haruna")
  				("mkv" .    "haruna")
  				("mp3" . "audacious")
  				("ogg" . "audacious")
  				("acm" . "audacious")
  				("wav" . "audacious"))))
#+END_SRC

* LSP

** LSP-Mode

*** LSP-Mode Setup
#+BEGIN_SRC emacs-lisp
  (defun pkoa/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . pkoa/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+END_SRC

*** LSP UI/Compatibility
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-ivy
    :straight t
    :after lsp)
#+END_SRC

** Company

*** Company-Mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :after lsp-mode
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (global-company-mode t))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
#+END_SRC

*** Company-Prescient
#+BEGIN_SRC emacs-lisp
  (use-package company-prescient
    :straight t
    :hook (company-mode . company-prescient-mode))
#+END_SRC

** Languages

*** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :straight t)
#+END_SRC

*** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :straight t)
  (use-package inf-ruby
    :straight t)
  (use-package robe
    :straight t
    :hook (ruby-mode . robe-mode))
#+END_SRC

*** Hyprlang
#+BEGIN_SRC emacs-lisp
  (use-package hyprlang-ts-mode
    :straight t)
  (add-to-list 'treesit-language-source-alist
  	     '(hyprlang "https://github.com/tree-sitter-grammars/tree-sitter-hyprlang"))
#+END_SRC

* Terminal and Shell

** Term

*** Better Term
#+BEGIN_SRC emacs-lisp
  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args
    
    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+END_SRC

*** Term 256 Color
#+BEGIN_SRC emacs-lisp
  (use-package eterm-256color
    :straight t
    :hook (term-mode . eterm-256color-mode))
#+END_SRC

*** EaT (Better Term)
#+BEGIN_SRC emacs-lisp
    (straight-use-package
     '(eat :type git
           :host codeberg
           :repo "akib/emacs-eat"
           :files ("*.el" ("term" "term/*.el") "*.texi"
                   "*.ti" ("terminfo/e" "terminfo/e/*")
                   ("terminfo/65" "terminfo/65/*")
                   ("integration" "integration/*")
                   (:exclude ".dir-locals.el" "*-tests.el"))
           :hook (eshell-load . eat-eshell-mode)))
#+END_SRC

** Shell

*** Better eShell
#+BEGIN_SRC emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    
    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'beginning-of-line)
    (evil-normalize-keymaps)
    
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :straight t
    :after eshell)

  (use-package eshell-z
    :straight t
    :after eshell)

  (use-package esh-help
    :straight t
    :after eshell
    :config (setup-esh-help-eldoc))

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "nvim" "gdu")))
    
    (eshell-git-prompt-use-theme 'powerline))

#+END_SRC

* Keybindings Leader

** UI

*** Window (w)
#+BEGIN_SRC emacs-lisp
  (pkoa/leader
    "w" '(:ignore t :which-key "Window")
    "wd" '(delete-window :which-key "Delete Window")
    "wv" '(evil-window-vsplit :which-key "Split Vertically")
    "ws" '(evil-window-split :which-key "Split Horizontally")
    "wh" '(evil-window-left :which-key "Switch Window Left")
    "wl" '(evil-window-right :which-key "Switch Window Right")
    "wk" '(evil-window-up :which-key "Switch Window Up")
    "wj" '(evil-window-down :which-key "Switch Window Down")
    "ww" '(evil-window-next :which-key "Next Window")
    "wr" '(redraw-display :which-key "Refresh Window/Display")
    "wi" '(delete-other-windows :which-key "Isolate Window"))
#+END_SRC

*** Buffer (b)
#+BEGIN_SRC emacs-lisp
  (pkoa/leader
   "b" '(:ignore t :which-key "Buffer")
   "bc" '(recenter :which-key "Center on Cursor")
   "bw" '(save-buffer :which-key "Save Current Buffer")
   "bd" '(kill-buffer :which-key "Kill Current Buffer")
   "bs" '(switch-to-buffer :which-key "Switch Buffer"))
#+END_SRC

** Actions

*** File (f)
#+BEGIN_SRC emacs-lisp
  (pkoa/leader
    "f" '(:ignore t :which-key "File")
    "ff" '(find-file :which-key "Find File")
    "fP" '((lambda () (interactive)
  	 (find-file "~/.emacs.d/config.org"))
  	 :which-key "Emacs config.org")
    "fg" '(rg :which-key "RipGrep")
    "fG" '(ag :which-key "Silver-Searcher")
    "fe" '(eval-last-sexp :which-key "evaluate")
    "fs" '(swiper :which-key "Search File")
    "fw" '(write-file :which-key "Write File to...")
    "fr" '(counsel-recentf :which-key "Recent Files")
    "fu" '(sudo-edit-find-file :j which-key "Sudo Find File")
    "fU" '(sudo-edit :which-key "Sudo Edit File"))
#+END_SRC 

*** Magit (m)
#+BEGIN_SRC emacs-lisp
  (pkoa/leader
    "m" '(:ignore t :which-key "Magit")
    "mm" '(magit-status :which-key "Magit Status")
    "md" '(magit-dispatch :which-key "Dispatch")
    "mf" '(with-editor-finish :which-key "Confirm")
    "ms" '(magit-stage-modified :which-key "Stage")
    "mS" '(magit-unstage-all :which-key "Unstage")
    "mc" '(magit-commit :which-key "Commit")
    "mp" '(magit-push :which-key "Push")
    "mP" '(magit-pull :which-key "Pull"))
#+END_SRC


*** Org (o)
#+BEGIN_SRC emacs-lisp
    (pkoa/leader
    "o" '(:ignore t :which-key "Org"))
#+END_SRC

*** Misc (non-prefixed)
#+BEGIN_SRC emacs-lisp
  (pkoa/leader
    "SPC" '(counsel-M-x :which-key "M-x"))
#+END_SRC

* Ending Script

** Optimization

*** GC faster
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+END_SRC
